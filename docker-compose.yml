version: "3.8"

services:
  traefik:
    profiles: [ "default" ]
    image: traefik:${TRAEFIK_VERSION}
    env_file:
      - ./.env
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=false
      - --providers.file.filename=/etc/traefik/dynamic_conf.yml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${DOMAIN_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      # development acme server, without rate limits
      # - --certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.myresolver.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --log.level=INFO
    ports:
      - 80:80
      - 443:443
      - 8090:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./dynamic_conf.yml:/etc/traefik/dynamic_conf.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - proxy-net
      - localhost-net
    restart: unless-stopped

  traefik_certs_dumper:
    profiles: [ "default", "certs" ]
    image: ldez/traefik-certs-dumper:latest
    command: [ "file", "--source", "/letsencrypt/acme.json", "--dest", "/certs-output", "--domain-subdir=true", "--watch", "--version=v3", "--post-hook", "/scripts/fix-permissions.sh" ]
    volumes:
      - ./letsencrypt:/letsencrypt:ro
      - ${CERTS_DIR}:/certs-output
      - ./traefik_certs_dumper/fix-permissions.sh:/scripts/fix-permissions.sh:ro
    environment:
      # Dump as many separate .pem files:
      - TCL_SELFSIGNED=true
      # - TCD_CHOWN=${POSTGRES_UID}:${POSTGRES_GID}
      # - TCD_CHMOD=0644
      # - TCD_CHMOD_DIR=0755
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "test -f /certs-output/${DOMAIN}/privatekey.key" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 5s
    networks:
      - proxy-net

  postgis:
    profiles: [ "default", "no-proxy", "pg-only" ]
    image: kartoza/postgis:${POSTGRES_VERSION}
    # build:
    #   context: ./postgis
    #   dockerfile: Dockerfile
    #   args:
    #     - POSTGRES_VERSION=${POSTGRES_VERSION}
    env_file:
      - ./.env.postgis
      - ./.env
    entrypoint: [ "/scripts/custom/docker-entrypoint.sh" ]
    volumes:
      - ./postgis/custom-confs:/scripts/custom
      - ${CERTS_DIR}:/letsencrypt-certs
      - ${POSTGRES_DATA_DIR}:/var/lib/postgresql
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - SSL_DIR=/letsencrypt-certs/${POSTGRES_SSL_DOMAIN}
      - SSL_CERT_FILE=/letsencrypt-certs/${POSTGRES_SSL_DOMAIN}/certificate.crt
      - SSL_KEY_FILE=/letsencrypt-certs/${POSTGRES_SSL_DOMAIN}/privatekey.key
      - SSL_CA_FILE=/letsencrypt-certs/${POSTGRES_SSL_DOMAIN}/certificate.crt
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost -p 5432" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # depends_on:
    #   traefik_certs_dumper:
    #     condition: service_healthy
    networks:
      - proxy-net
    shm_size: ${POSTGRES_CONTAINER_MEM}
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_CONTAINER_MEM}

  geoserver:
    profiles: [ "default", "no-proxy" ]
    image: kartoza/geoserver:${GS_VERSION}
    # build:
    #   context: .
    #   dockerfile: geoserver.dockerfile
    #   args:
    #     GS_VERSION: ${GS_VERSION}
    env_file:
      - ./.env.geoserver
      - ./.env
    environment:
      POSTGRES_PORT: 5432
      COMMUNITY_EXTENSIONS: sec-oauth2-openid-connect-plugin
    depends_on:
      postgis:
        condition: service_healthy
    volumes:
      - ${AVOIN_DATA_PATH}:/data
      - ${GEOSERVER_DATA_PATH}:${GEOSERVER_VOLUME_MOUNT}
      - ./tomcat-conf/web.xml:/usr/local/tomcat/conf/web.xml:ro
    ports:
      - ${GEOSERVER_PORT}:8080
    restart: unless-stopped
    healthcheck:
      test: >
        curl --fail --silent --location --max-redirs 5 "http://localhost:8080/geoserver/ows?service=WMS&request=GetCapabilities" || exit 1
      start_period: 120s
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
      - proxy-net
      - localhost-net
    shm_size: ${GEOSERVER_CONTAINER_MEM}
    deploy:
      resources:
        limits:
          memory: ${GEOSERVER_CONTAINER_MEM}

  autoheal:
    profiles: [ "default", "no-proxy" ]
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - DOCKER_SOCK=/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - proxy-net

networks:
  proxy-net:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}
  localhost-net:
    external: true
